name "act_schilling"
# Optionally declare the version number
# version "0.1"

using_library "act_schilling"
import_types_from "act_schilling/ActTypes.hpp"
import_types_from "act_schilling/Config.hpp"
import_types_from "act_schilling/PanTiltTypes.hpp"
import_types_from "hrov_control/hrov_controlTypes.hpp"
import_types_from "base_schilling/Error.hpp"

using_task_library "iodrivers_base"

# Declare a new task context (i.e., a component)
#
# The corresponding C++ class can be edited in tasks/Task.hpp and
# tasks/Task.cpp, and will be put in the ucm_schilling namespace.
task_context "Task" do
    subclasses "iodrivers_base::Task"
    needs_configuration
    runtime_states  :INIT_DEV, :CAL_DEV, :MONITORING
    error_states :COMM_ERROR, :DEV_ERROR
    property('config','act_schilling/Config').
	doc('configuration values for the actuator, standard velocity in position mode, default control mode and home position in angles')
    property('boundaries','act_schilling/ActBoundaries').
	doc('boundaries are the min/max values in angle, determined by the actuators mechanical assembly')
    operation('calibrate').
        doc('start calibration of the device')
    operation('setControlMode').
        doc('set the control mode to position, velocity or none').
        argument('mode', 'act_schilling/ControlMode')
    output_port "act_samples", "act_schilling/ActData"
    output_port "act_status", "act_schilling/ActDeviceStatus"
    output_port('log_message', 'oro_marum/LogMessage').
        doc 'TextMessage with different priority levels'
    input_port('pos', 'int').
        doc "set position"
    input_port('vel', 'int').
        doc "set velocity"
    input_port('doublevel', 'double').
        doc "set velocity"        
    periodic(0.2)
end

task_context "PanTiltTask" do
  subclasses "iodrivers_base::Task"
  needs_configuration
  runtime_states  :INIT_DEV, :CAL_DEV, :MONITORING
  error_states :COMM_ERROR, :DEV_ERROR
  property('config','act_schilling/Config').
doc('configuration values for the actuator, standard velocity in position mode, default control mode and home position in angles')
  property('boundaries','act_schilling/ActBoundaries').
doc('boundaries are the min/max values in angle, determined by the actuators mechanical assembly')
  operation('calibrate').
      doc('start calibration of the device')
  operation('setControlMode').
      doc('set the control mode to position, velocity or none').
      argument('mode', 'act_schilling/ControlMode')
  output_port "act_samples", "act_schilling/ActData"
  output_port "act_status", "act_schilling/ActDeviceStatus"
  output_port('log_message', 'oro_marum/LogMessage').
      doc 'TextMessage with different priority levels'
  input_port('pos', 'int').
      doc "set position"
  input_port('vel', 'int').
      doc "set velocity"
  input_port('doublevel', 'double').
      doc "set velocity"
  
  property('joystickMap','act_schilling/JoyStickMapping').
    doc('mapping values for the joystick')
  property('defaultPositions','act_schilling/PanTiltDefaultPos').
    doc('default Actuator Positions')  
  
  operation('setDefaultPos').
      doc('set the default positions for the actuator').
      argument('defPos', 'int')
      
  operation('setActualPosAsDefault').
      doc('set the actual Position as new default position for the actuator').
      argument('defPos', 'int')
  
  input_port('lock', 'bool').
      doc "lock Aktuator"
  input_port('rawCommand', 'hrov_control/RawCommand').
      doc 'Port for raw command structures comming from the joystick'
  port_driven "rawCommand"
  
  output_port "act_calibstatus", "bool"
  
  periodic(0.2)
end


# Declares a deployment, i.e. an actual executable that contains various tasks.
deployment "act_schilling_test" do
    # This is a test deployment that should not be installed
    do_not_install

    # Declares it as periodic, with a period of 100ms
    task("act_schilling", "act_schilling::Task").
      periodic(0.1)
    add_default_logger
end
